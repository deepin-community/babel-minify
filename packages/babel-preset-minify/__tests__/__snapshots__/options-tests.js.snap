// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`preset-options should handle options that are delegated to multiple other options 1`] = `
Object {
  "input": Object {
    "keepClassName": false,
    "keepFnName": false,
  },
  "output": Array [
    "babel-plugin-transform-minify-booleans",
    "babel-plugin-minify-builtins",
    "babel-plugin-transform-inline-consecutive-adds",
    Array [
      "babel-plugin-minify-dead-code-elimination",
      Object {
        "keepClassName": false,
        "keepFnName": false,
      },
    ],
    "babel-plugin-minify-constant-folding",
    "babel-plugin-minify-flip-comparisons",
    "babel-plugin-minify-guarded-expressions",
    "babel-plugin-minify-infinity",
    Array [
      "babel-plugin-minify-mangle-names",
      Object {
        "keepClassName": false,
        "keepFnName": false,
      },
    ],
    "babel-plugin-transform-member-expression-literals",
    "babel-plugin-transform-merge-sibling-variables",
    "babel-plugin-minify-numeric-literals",
    "babel-plugin-transform-property-literals",
    "babel-plugin-transform-regexp-constructors",
    "babel-plugin-transform-remove-undefined",
    "babel-plugin-minify-replace",
    "babel-plugin-minify-simplify",
    "babel-plugin-transform-simplify-comparison-operators",
    "babel-plugin-minify-type-constructors",
    "babel-plugin-transform-undefined-to-void",
  ],
}
`;

exports[`preset-options should handle options that are delegated to multiple other options 2`] = `
Object {
  "input": Object {
    "keepClassName": true,
    "keepFnName": true,
    "mangle": Object {
      "exclude": Array [
        "foo",
        "bar",
      ],
      "keepClassName": true,
      "keepFnName": true,
    },
  },
  "output": Array [
    "babel-plugin-transform-minify-booleans",
    "babel-plugin-minify-builtins",
    "babel-plugin-transform-inline-consecutive-adds",
    Array [
      "babel-plugin-minify-dead-code-elimination",
      Object {
        "keepClassName": true,
        "keepFnName": true,
      },
    ],
    "babel-plugin-minify-constant-folding",
    "babel-plugin-minify-flip-comparisons",
    "babel-plugin-minify-guarded-expressions",
    "babel-plugin-minify-infinity",
    Array [
      "babel-plugin-minify-mangle-names",
      Object {
        "exclude": Array [
          "foo",
          "bar",
        ],
        "keepClassName": true,
        "keepFnName": true,
      },
    ],
    "babel-plugin-transform-member-expression-literals",
    "babel-plugin-transform-merge-sibling-variables",
    "babel-plugin-minify-numeric-literals",
    "babel-plugin-transform-property-literals",
    "babel-plugin-transform-regexp-constructors",
    "babel-plugin-transform-remove-undefined",
    "babel-plugin-minify-replace",
    "babel-plugin-minify-simplify",
    "babel-plugin-transform-simplify-comparison-operators",
    "babel-plugin-minify-type-constructors",
    "babel-plugin-transform-undefined-to-void",
  ],
}
`;

exports[`preset-options should handle options that are delegated to multiple other options 3`] = `
Object {
  "input": Object {
    "keepClassName": true,
    "keepFnName": true,
    "mangle": Object {
      "exclude": Array [
        "baz",
      ],
      "keepClassName": false,
      "keepFnName": false,
    },
  },
  "output": Array [
    "babel-plugin-transform-minify-booleans",
    "babel-plugin-minify-builtins",
    "babel-plugin-transform-inline-consecutive-adds",
    Array [
      "babel-plugin-minify-dead-code-elimination",
      Object {
        "keepClassName": true,
        "keepFnName": true,
      },
    ],
    "babel-plugin-minify-constant-folding",
    "babel-plugin-minify-flip-comparisons",
    "babel-plugin-minify-guarded-expressions",
    "babel-plugin-minify-infinity",
    Array [
      "babel-plugin-minify-mangle-names",
      Object {
        "exclude": Array [
          "baz",
        ],
        "keepClassName": false,
        "keepFnName": false,
      },
    ],
    "babel-plugin-transform-member-expression-literals",
    "babel-plugin-transform-merge-sibling-variables",
    "babel-plugin-minify-numeric-literals",
    "babel-plugin-transform-property-literals",
    "babel-plugin-transform-regexp-constructors",
    "babel-plugin-transform-remove-undefined",
    "babel-plugin-minify-replace",
    "babel-plugin-minify-simplify",
    "babel-plugin-transform-simplify-comparison-operators",
    "babel-plugin-minify-type-constructors",
    "babel-plugin-transform-undefined-to-void",
  ],
}
`;

exports[`preset-options should handle simple options 1`] = `
Object {
  "input": Object {
    "deadcode": false,
    "mangle": false,
  },
  "output": Array [
    "babel-plugin-transform-minify-booleans",
    "babel-plugin-minify-builtins",
    "babel-plugin-transform-inline-consecutive-adds",
    "babel-plugin-minify-constant-folding",
    "babel-plugin-minify-flip-comparisons",
    "babel-plugin-minify-guarded-expressions",
    "babel-plugin-minify-infinity",
    "babel-plugin-transform-member-expression-literals",
    "babel-plugin-transform-merge-sibling-variables",
    "babel-plugin-minify-numeric-literals",
    "babel-plugin-transform-property-literals",
    "babel-plugin-transform-regexp-constructors",
    "babel-plugin-transform-remove-undefined",
    "babel-plugin-minify-replace",
    "babel-plugin-minify-simplify",
    "babel-plugin-transform-simplify-comparison-operators",
    "babel-plugin-minify-type-constructors",
    "babel-plugin-transform-undefined-to-void",
  ],
}
`;

exports[`preset-options should pass options to respective plugin when its an object 1`] = `
Object {
  "input": Object {
    "mangle": Object {
      "exclude": Array [
        "foo",
        "bar",
      ],
    },
  },
  "output": Array [
    "babel-plugin-transform-minify-booleans",
    "babel-plugin-minify-builtins",
    "babel-plugin-transform-inline-consecutive-adds",
    "babel-plugin-minify-dead-code-elimination",
    "babel-plugin-minify-constant-folding",
    "babel-plugin-minify-flip-comparisons",
    "babel-plugin-minify-guarded-expressions",
    "babel-plugin-minify-infinity",
    Array [
      "babel-plugin-minify-mangle-names",
      Object {
        "exclude": Array [
          "foo",
          "bar",
        ],
      },
    ],
    "babel-plugin-transform-member-expression-literals",
    "babel-plugin-transform-merge-sibling-variables",
    "babel-plugin-minify-numeric-literals",
    "babel-plugin-transform-property-literals",
    "babel-plugin-transform-regexp-constructors",
    "babel-plugin-transform-remove-undefined",
    "babel-plugin-minify-replace",
    "babel-plugin-minify-simplify",
    "babel-plugin-transform-simplify-comparison-operators",
    "babel-plugin-minify-type-constructors",
    "babel-plugin-transform-undefined-to-void",
  ],
}
`;

exports[`preset-options should return defaults with no options 1`] = `
Array [
  "babel-plugin-transform-minify-booleans",
  "babel-plugin-minify-builtins",
  "babel-plugin-transform-inline-consecutive-adds",
  "babel-plugin-minify-dead-code-elimination",
  "babel-plugin-minify-constant-folding",
  "babel-plugin-minify-flip-comparisons",
  "babel-plugin-minify-guarded-expressions",
  "babel-plugin-minify-infinity",
  "babel-plugin-minify-mangle-names",
  "babel-plugin-transform-member-expression-literals",
  "babel-plugin-transform-merge-sibling-variables",
  "babel-plugin-minify-numeric-literals",
  "babel-plugin-transform-property-literals",
  "babel-plugin-transform-regexp-constructors",
  "babel-plugin-transform-remove-undefined",
  "babel-plugin-minify-replace",
  "babel-plugin-minify-simplify",
  "babel-plugin-transform-simplify-comparison-operators",
  "babel-plugin-minify-type-constructors",
  "babel-plugin-transform-undefined-to-void",
]
`;

exports[`preset-options should return defaults with no options 2`] = `
Array [
  "babel-plugin-transform-minify-booleans",
  "babel-plugin-minify-builtins",
  "babel-plugin-transform-inline-consecutive-adds",
  "babel-plugin-minify-dead-code-elimination",
  "babel-plugin-minify-constant-folding",
  "babel-plugin-minify-flip-comparisons",
  "babel-plugin-minify-guarded-expressions",
  "babel-plugin-minify-infinity",
  "babel-plugin-minify-mangle-names",
  "babel-plugin-transform-member-expression-literals",
  "babel-plugin-transform-merge-sibling-variables",
  "babel-plugin-minify-numeric-literals",
  "babel-plugin-transform-property-literals",
  "babel-plugin-transform-regexp-constructors",
  "babel-plugin-transform-remove-undefined",
  "babel-plugin-minify-replace",
  "babel-plugin-minify-simplify",
  "babel-plugin-transform-simplify-comparison-operators",
  "babel-plugin-minify-type-constructors",
  "babel-plugin-transform-undefined-to-void",
]
`;

exports[`preset-options should return defaults with no options 3`] = `
Array [
  "babel-plugin-transform-minify-booleans",
  "babel-plugin-minify-builtins",
  "babel-plugin-transform-inline-consecutive-adds",
  "babel-plugin-minify-dead-code-elimination",
  "babel-plugin-minify-constant-folding",
  "babel-plugin-minify-flip-comparisons",
  "babel-plugin-minify-guarded-expressions",
  "babel-plugin-minify-infinity",
  "babel-plugin-minify-mangle-names",
  "babel-plugin-transform-member-expression-literals",
  "babel-plugin-transform-merge-sibling-variables",
  "babel-plugin-minify-numeric-literals",
  "babel-plugin-transform-property-literals",
  "babel-plugin-transform-regexp-constructors",
  "babel-plugin-transform-remove-undefined",
  "babel-plugin-minify-replace",
  "babel-plugin-minify-simplify",
  "babel-plugin-transform-simplify-comparison-operators",
  "babel-plugin-minify-type-constructors",
  "babel-plugin-transform-undefined-to-void",
]
`;
